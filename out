
out.bin:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 81 ec 00 00 00 00 	sub    rsp,0x0
   b:	48 8d 0d 00 00 00 00 	lea    rcx,[rip+0x0]        # 12 <main+0x12>
  12:	c9                   	leave  
  13:	c3                   	ret    

Disassembly of section .data:

0000000000000000 <L.0>:
   0:	68 65 6c 6c 6f       	push   0x6f6c6c65
	...



00000000  7f 45 4c 46 02 01 01 00  00 00 00 00 00 00 00 00  |.ELF............|
00000010  01 00 3e 00 01 00 00 00  00 00 00 00 00 00 00 00  |..>.............|
00000020  00 00 00 00 00 00 00 00  40 00 00 00 00 00 00 00  |........@.......|
00000030  00 00 00 00 40 00 00 00  00 00 40 00 07 00 05 00  |....@.....@.....|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
*
00000080  01 00 00 00 01 00 00 00  06 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 02 00 00 00 00 00 00  |................|
000000a0  14 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000b0  08 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000c0  07 00 00 00 01 00 00 00  03 00 00 00 00 00 00 00  |................|
000000d0  00 00 00 00 00 00 00 00  18 02 00 00 00 00 00 00  |................|
000000e0  06 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000000f0  08 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000100  17 00 00 00 02 00 00 00  00 00 00 00 00 00 00 00  |................|
00000110  00 00 00 00 00 00 00 00  1f 02 00 00 00 00 00 00  |................|
00000120  60 00 00 00 00 00 00 00  06 00 00 00 02 00 00 00  |`...............|
00000130  04 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00  |................|
00000140  27 00 00 00 04 00 00 00  00 00 00 00 00 00 00 00  |'...............|
00000150  00 00 00 00 00 00 00 00  7f 02 00 00 00 00 00 00  |................|
00000160  18 00 00 00 00 00 00 00  03 00 00 00 01 00 00 00  |................|
00000170  04 00 00 00 00 00 00 00  18 00 00 00 00 00 00 00  |................|
00000180  0d 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
00000190  00 00 00 00 00 00 00 00  97 02 00 00 00 00 00 00  |................|
000001a0  32 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |2...............|
000001b0  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001c0  1f 00 00 00 03 00 00 00  00 00 00 00 00 00 00 00  |................|
000001d0  00 00 00 00 00 00 00 00  c9 02 00 00 00 00 00 00  |................|
000001e0  12 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
000001f0  01 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000200  55 48 89 e5 48 81 ec 00  00 00 00 48 8d 0d 00 00  |UH..H......H....|
00000210  00 00 c9 c3 00 00 00 00  68 65 6c 6c 6f 00 00 00  |........hello...|
00000220  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000230  00 00 00 00 00 00 00 01  00 00 00 04 00 f1 ff 00  |................|
00000240  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 0a  |................|
00000250  00 00 00 10 00 01 00 00  00 00 00 00 00 00 00 00  |................|
00000260  00 00 00 00 00 00 00 0f  00 00 00 10 00 02 00 00  |................|
00000270  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 0e  |................|
00000280  00 00 00 00 00 00 00 02  00 00 00 03 00 00 00 fc  |................|
00000290  ff ff ff ff ff ff ff 00  2e 74 65 78 74 00 2e 64  |.........text..d|
000002a0  61 74 61 00 2e 73 68 73  74 72 74 61 62 00 2e 73  |ata..shstrtab..s|
000002b0  79 6d 74 61 62 00 2e 73  74 72 74 61 62 00 2e 72  |ymtab..strtab..r|
000002c0  65 6c 61 2e 74 65 78 74  00 00 74 65 73 74 2e 6f  |ela.text..test.o|
000002d0  70 70 00 6d 61 69 6e 00  4c 2e 30 00 00 00 00 00  |pp.main.L.0.....|
000002e0  00 00 00 00 00 00 00 00  00 00                    |..........|
000002ea



#include <elf.h>

/*
 * ELF dump of 'out.bin'
 *     746 (0x2EA) bytes
 */

Elf64_Dyn dumpedelf_dyn_0[];
struct {
	Elf64_Ehdr ehdr;
	Elf64_Phdr phdrs[0];
	Elf64_Shdr shdrs[7];
	Elf64_Dyn *dyns;
} dumpedelf_0 = {

.ehdr = {
	.e_ident = { /* (EI_NIDENT bytes) */
		/* [0] EI_MAG:        */ 0x7F,'E','L','F',
		/* [4] EI_CLASS:      */ 2 , /* (ELFCLASS64) */
		/* [5] EI_DATA:       */ 1 , /* (ELFDATA2LSB) */
		/* [6] EI_VERSION:    */ 1 , /* (EV_CURRENT) */
		/* [7] EI_OSABI:      */ 0 , /* (ELFOSABI_NONE) */
		/* [8] EI_ABIVERSION: */ 0 ,
		/* [9-15] EI_PAD:     */ 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
	},
	.e_type      = 1          , /* (ET_REL) */
	.e_machine   = 62         , /* (EM_X86_64) */
	.e_version   = 1          , /* (EV_CURRENT) */
	.e_entry     = 0x0        , /* (start address at runtime) */
	.e_phoff     = 0          , /* (bytes into file) */
	.e_shoff     = 64         , /* (bytes into file) */
	.e_flags     = 0x0        ,
	.e_ehsize    = 64         , /* (bytes) */
	.e_phentsize = 0          , /* (bytes) */
	.e_phnum     = 0          , /* (program headers) */
	.e_shentsize = 64         , /* (bytes) */
	.e_shnum     = 7          , /* (section headers) */
	.e_shstrndx  = 5         
},

.phdrs = {
 /* no program headers ! */ },

.shdrs = {
/* Section Header #0 '' 0x40 */
{
	.sh_name      = 0          ,
	.sh_type      = 0          , /* [SHT_NULL] */
	.sh_flags     = 0          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 0          , /* (bytes) */
	.sh_size      = 0          , /* (bytes) */
	.sh_link      = 0          ,
	.sh_info      = 0          ,
	.sh_addralign = 0          ,
	.sh_entsize   = 0         
},
/* Section Header #1 '.text' 0x80 */
{
	.sh_name      = 1          ,
	.sh_type      = 1          , /* [SHT_PROGBITS] */
	.sh_flags     = 6          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 512        , /* (bytes) */
	.sh_size      = 20         , /* (bytes) */
	.sh_link      = 0          ,
	.sh_info      = 0          ,
	.sh_addralign = 8          ,
	.sh_entsize   = 0         
},
/* Section Header #2 '.data' 0xC0 */
{
	.sh_name      = 7          ,
	.sh_type      = 1          , /* [SHT_PROGBITS] */
	.sh_flags     = 3          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 536        , /* (bytes) */
	.sh_size      = 6          , /* (bytes) */
	.sh_link      = 0          ,
	.sh_info      = 0          ,
	.sh_addralign = 8          ,
	.sh_entsize   = 0         
},
/* Section Header #3 '.symtab' 0x100 */
{
	.sh_name      = 23         ,
	.sh_type      = 2          , /* [SHT_SYMTAB] */
	.sh_flags     = 0          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 543        , /* (bytes) */
	.sh_size      = 96         , /* (bytes) */
	.sh_link      = 6          ,
	.sh_info      = 2          ,
	.sh_addralign = 4          ,
	.sh_entsize   = 24        
},
/* Section Header #4 '.rela.text' 0x140 */
{
	.sh_name      = 39         ,
	.sh_type      = 4          , /* [SHT_RELA] */
	.sh_flags     = 0          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 639        , /* (bytes) */
	.sh_size      = 24         , /* (bytes) */
	.sh_link      = 3          ,
	.sh_info      = 1          ,
	.sh_addralign = 4          ,
	.sh_entsize   = 24        
},
/* Section Header #5 '.shstrtab' 0x180 */
{
	.sh_name      = 13         ,
	.sh_type      = 3          , /* [SHT_STRTAB] */
	.sh_flags     = 0          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 663        , /* (bytes) */
	.sh_size      = 50         , /* (bytes) */
	.sh_link      = 0          ,
	.sh_info      = 0          ,
	.sh_addralign = 1          ,
	.sh_entsize   = 0         

	/* section dump:
	 * .text
	 * .data
	 * .shstrtab
	 * .symtab
	 * .strtab
	 * .rela.text
	 */
},
/* Section Header #6 '.strtab' 0x1C0 */
{
	.sh_name      = 31         ,
	.sh_type      = 3          , /* [SHT_STRTAB] */
	.sh_flags     = 0          ,
	.sh_addr      = 0x0        ,
	.sh_offset    = 713        , /* (bytes) */
	.sh_size      = 18         , /* (bytes) */
	.sh_link      = 0          ,
	.sh_info      = 0          ,
	.sh_addralign = 1          ,
	.sh_entsize   = 0         

	/* section dump:
	 * test.opp
	 * main
	 * L.0
	 */
},
},

.dyns = dumpedelf_dyn_0,
};
Elf64_Dyn dumpedelf_dyn_0[] = {
 /* no dynamic tags ! */ };
