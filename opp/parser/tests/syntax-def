/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Opp Syntax
/* 
	## Block syle comment

	## This file is an example / brainstorm of Opp syntax
*/

// Import standart libs
import "oppio";

// Global variables
auto global = 2;
auto* ptr = "hello";

main(argc, **argv) {
	*argc = 2; // Error compiler sees that argc is not a pointer

	switch (argc) {
		case 1:
			puts(argv[1]);
			break;
	}

	return 1;
}

memset(*data, val, len) {
	auto i = 0;

	while (i < len) {
		/* Pointer is of unknown type so offset by 
		8 since we want arr of 8 bytes integers */
		data[i * 8] = val;
		i++;
	}

	return len;
}

test(val) {
	for (auto i = 0; i < 10; i++) {
		val += i;
	}

	return val;
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/* Opp Type Casting system 

- Since Opp does not have types there is a type system in place of that
- Lets assume we have a pointer that points to a struct that looks like this in memory

struct Data {
	char a;
	int b;
	long c;	
};

Default 64Bit GCC padding would look like this.

struct Data {
	char a;
	char _PADDING[3];
	int b;
	long c;
};

In memory (with packed):
[a][PAD][PAD][PAD][b][][][][c][][][][][][][]

Keep this padding in mind when operating on buffers.

*/

extern auto* Data;

/* Cast Function */
cast(type, *loc, val);

/* This takes in the predefined constants "type"
Type can be (defined in std):
	CHAR
	INT
	SHORT
	LONG
*/

// Example on buffer above
// Assign the char
cast(CHAR, &Data[0], 1);

// Assign the int
cast(INT, &Data[4], 2);

// Assign the long
Data[8] = 3;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

